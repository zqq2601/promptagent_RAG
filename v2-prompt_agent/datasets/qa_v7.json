{
  "examples": [
  {
      "input": "Question: What is the primary purpose of authentication in security design?\nOptions:\nA. To grant all users unrestricted access to resources.\nB. To monitor and log the activities of users within the system.\nC. To confirm an individual's identity through a specific process.\nD. To determine the cost-effectiveness of security measures.\nAnswer:",
      "target_scores": {
        "A": 0,
        "B": 0,
        "C": 1,
        "D": 0
      },
      "target": "C"
    },
  {
      "input": "Question: What is the significance of encryption in protecting sensitive data?\nOptions:\nA. It is only used for data in transit, not data at rest.\nB. It makes data storage more efficient.\nC. It is an optional enhancement for organizations with extra resources.\nD. It converts sensitive data into a format that is unreadable without a decryption key, providing a layer of security.\nAnswer:",
      "target_scores": {
        "A": 0,
        "B": 0,
        "C": 0,
        "D": 1
      },
      "target": "D"
    },
  {
      "input": "Question: What is a security concern associated with Software as a Service (SaaS)?\nOptions:\nA. High costs associated with software licensing.\nB. Consolidation of information with a single provider leading to potential data leaks.\nC. The inability to customize software according to business needs.\nD. The need for constant hardware upgrades.\nAnswer:",
      "target_scores": {
        "A": 0,
        "B": 1,
        "C": 0,
        "D": 0
      },
      "target": "B"
    },
  {
    "input": "Question: In 2025 a post-quantum blockchain consensus mechanism, which cryptographic primitive is theoretically vulnerable to Shor's algorithm even when using lattice-based homomorphic encryption?\nOptions:\nA. zk-SNARKs with pairing-friendly curves\nB. AES-256 in OFB mode\nC. SHA-3 with sponge construction\nD. BLS signatures over supersingular curves\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 0,
      "C": 0,
      "D": 1
    },
    "target": "D"
  },
  {
    "input": "Question: When implementing memory-safe mitigations for RISC-V speculative execution vulnerabilities, which hardware/software co-design approach best prevents transient execution attacks while maintaining branch prediction efficiency?\nOptions:\nA. Shadow stacks with pointer authentication\nB. Speculative load hardening (SLH)\nC. CET with IBRS microcode updates\nD. Memory tagging via MTE extensions\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 1,
      "C": 0,
      "D": 0
    },
    "target": "B"
  },
  {
    "input": "Question: In differential privacy applied to federated learning, which composition theorem should be used when combining (ε, δ)-differentially private mechanisms with adaptive query selection across non-IID client data partitions?\nOptions:\nA. Advanced composition with Gaussian noise\nB. Basic sequential composition\nC. Rényi differential privacy composition\nD. Moment accountant with privacy amplification\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 0,
      "C": 0,
      "D": 1
    },
    "target": "D"
  },
  {
    "input": "Question: Which novel attack vector exploits transient execution vulnerabilities in WebAssembly sandboxed environments through shared memory timing side-channels?\nOptions:\nA. Spectre-RELOAD\nB. Meltdown-WASI\nC. ZombieLoad 2.0\nD. PortSmash-JIT\nAnswer:",
    "target_scores": {
      "A": 1,
      "B": 0,
      "C": 0,
      "D": 0
    },
    "target": "A"
  },
  {
    "input": "Question: For secure enclave remote attestation in confidential computing, which TEE implementation requires the use of ratcheting session keys with forward secrecy when establishing a continuous attestation channel?\nOptions:\nA. Intel SGX DCAP\nB. AMD SEV-SNP\nC. ARM CCA Realms\nD. AWS Nitro Enclaves\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 0,
      "C": 1,
      "D": 0
    },
    "target": "C"
  },
  {
    "input": "Question: Which emerging vulnerability class combines Rowhammer bit-flips with memory deduplication to bypass kernel address space layout randomization (KASLR) in cloud container environments?\nOptions:\nA. RAMBleed++\nB. SMAP-escape\nC. Drammer\nD. CrossTalk\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 0,
      "C": 1,
      "D": 0
    },
    "target": "C"
  },
  {
    "input": "Question: When analyzing APT campaigns using MITRE's CALDERA framework, which adversarial emulation technique best simulates process hollowing with TLS beaconing through domain fronting?\nOptions:\nA. SIDEWINDER plugin\nB. MANTAUCHER module\nC. THORIUM injector\nD. BYOBU payload\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 1,
      "C": 0,
      "D": 0
    },
    "target": "B"
  },
  {
    "input": "Question: In formal verification of smart contracts in China, which ZKP system enables efficient recursive composition of proofs for state transitions in zk-rollups while maintaining succinct verification?\nOptions:\nA. PLONK with universal setup\nB. STARKs with FRI\nC. Bulletproofs with inner-product arguments\nD. Halo2 with lookup tables\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 0,
      "C": 0,
      "D": 1
    },
    "target": "D"
  },
  {
      "input": "Question: Which of the following is the most effective strategy for securing API keys used in cloud environments?\nOptions:\nA. Storing API keys in plaintext within application code.\nB. Using a secure vault service for storing and managing API keys.\nC. Sharing API keys over email with team members.\nD. Hard-coding API keys into mobile applications.\nAnswer:",
      "target_scores": {
        "A": 0,
        "B": 1,
        "C": 0,
        "D": 0
      },
      "target": "B"
    },
    {
      "input": "Question: How is a 'chain of trust' established in PKI?\nOptions:\nA. By users manually trusting each certificate.\nB. Via intermediate CAs signing certificates issued by root CAs.\nC. Using symmetric encryption for certificate validation.\nD. Through a single root CA signing all certificates.\nAnswer:",
      "target_scores": {
        "A": 0,
        "B": 1,
        "C": 0,
        "D": 0
      },
      "target": "B"
    },
    {
    "input": "Question: Which novel memory corruption technique exploits use-after-free vulnerabilities in JavaScript engines through precise garbage collector timing manipulation?\nOptions:\nA. GcMalloc\nB. Heap Feng Shui\nC. V8 Turbofan poisoning\nD. SpiderMonkey JIT spraying\nAnswer:",
    "target_scores": {
      "A": 0,
      "B": 1,
      "C": 0,
      "D": 0
    },
    "target": "B"
  }
  ]
}